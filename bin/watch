#!/usr/bin/env python3

import os
import argparse
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler, FileSystemEvent
import subprocess
import time
from typing import List
from datetime import datetime, timedelta, timezone


# TODO: setup for different filetypes
FILETYPE_COMMANDS = {
    ".py": "python3",
}

COMMAND_REPEAT_TIME = 0.1


class CommandEventHandler(FileSystemEventHandler):
    def __init__(self, command: str, file: str):
        self.command = command
        self.file = file
        self.last_ran = 0

    def on_modified(self, event: FileSystemEvent):
        if time.monotonic() - self.last_ran < COMMAND_REPEAT_TIME:
            return

        if event.src_path == self.file:
            print(f"\n[{get_new_york_time()}] $ {self.command}")

            start_time = time.monotonic()
            # TODO: can we run this in the same shell?
            subprocess.run(self.command, shell=True, text=True)
            end_time = time.monotonic()

            print(f"\ncommand finished in {end_time-start_time:.1f} seconds")
            self.last_ran = time.monotonic()


def create_command(file: str, args: List[str]) -> str:
    _, filetype = os.path.splitext(file)
    if filetype not in FILETYPE_COMMANDS:
        raise Exception(
            f"Filetype {filetype} not supported. Please provide and explicit command or use a file with filetype {list(FILETYPE_COMMANDS.keys())}"
        )

    return " ".join([FILETYPE_COMMANDS[filetype], file] + args)


def get_new_york_time():
    ny_time = datetime.now(timezone.utc) - timedelta(hours=5)
    return ny_time.strftime("%H:%M:%S")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Watch a file and run a command when it changes",
    )
    parser.add_argument(
        "file",
        help="file to watch for changes",
    )
    parser.add_argument(
        "-c",
        "--command",
        required=False,
        help="command to run when file changes, if not provided will infer from file extension",
    )
    parser.add_argument(
        "args",
        nargs="*",
        help="additional arguments to pass to the command",
    )
    args = parser.parse_args()

    command = args.command if args.command else create_command(args.file, args.args)
    print(f'watching file "{args.file}" and running command "{command}"')

    path = os.path.abspath(os.path.expanduser(args.file))
    event_handler = CommandEventHandler(command, path)
    observer = Observer()
    observer.schedule(event_handler, ".")
    observer.start()

    try:
        while observer.is_alive():
            observer.join(1)
    except KeyboardInterrupt:
        pass
    finally:
        observer.stop()
        observer.join()
